html
  include components/head.pug
  include components/header.pug

  .page-container
    h1 My Projects
    section
      p.
        Here is a curation of my own personal projects, complete and in progress.
         Most of my projects are based around fullstack based technologies but
         I enjoy trying all sorts of different experiments in much different patterns
         of programming.
    section.projects-container
      mixin project(title, stack, link, icon)
        div
          .header
            .title
              h2= title
              p= stack

            if icon
              img(src=icon)
          p
            block

      +project('Number Pad Keyboard', 'Ruby, Embedded Controller', '')
        My num pad project was to build a number key pad that I could use for playing
        classing rouge-like video games which require a number pad, which unfortunately
        my keyboard doesn't have. Thus I used one of my new Raspberry Pi Pico
        microcontrollers with a matrix of switches to build a number pad. I had
        designed and had laser cut a "plate" in which a flat peice of acrylic plastic
        which the key switches slot into. I programmed the pad in Ruby and it communicates
        to my computer over a USB connection.
      +project('Splashes', 'Laravel, JS, React', 'https://splashes.cc', './assets/splashes_icon.svg').
        Splashes is a web page builder that lets you build blog posts, or share
        small information leaflets with others. I built it using Laravel, JS,
        SCSS, and React. The choice of laravel as my framework of choice was to
        help expand my knowledge of the technology as I've been using it at work
        and I wanted to increase my knowledge of it and become more proficient in it.
        After completing the project I feel like I've improved my Laravel proficiency
        and have created a cool app to show for it.
      +project('Resolution Tracker', 'CoffeeScript, Firebase, React Native', '', './assets/resolution_tracker_icon.svg').
        Resolution Tracker is an app that I'm working on which will let you track
        a particular habit you want to form. For example, if you wanted to start
        running  in the morning, you could create a daily tracker, and you would
        be able to check off a button each day you go running. I've chosen to build
        it in React Native with expo so I can target mobile and web. I'm going for
        a Mobile First approach as to try and target wider audiences on their prefered
        platform.
      +project('Web Element Composition Utility', 'TypeScript', 'https://www.npmjs.com/package/wecu')
        WECU is a library that lets you create web components and compose them together 
        using intuative object oriented patterns. The idea behind WECU is that it
        lets the programmer take control of the program, with the user modifying the 
        DOM on their own terms. WECU is based arround the idea that the GUI is bound 
        to your data in the class, just how your actions are also. It results in
        creating a nice abstraction over the DOM for implementing reactive behaviour 
        without taking any control away from the programmer like a framework would.
      +project('Maths Helper Libraries', 'TypeScript', 'https://www.npmjs.com/~calebowensperson')
        I've been building libraries to aid different aspects of modeling systems in
        JavaScript and TypeScript. Firstly there is my vectors library which defines
        a generic length vectors implementation as well as 2, 3, and 4 dimensional
        vectors. I've made use of these in building a ray marching demo for rendering
        4D objects. Secondly is my gaussian ellimination library which is incredibly
        helpful for solving liear simultanious equations and finding the inverses of
        matricies. I made good use of this library in by ray marching demo also.
      +project('Monads, Result, and Optional Library', 'TypeScript', 'https://www.npmjs.com/package/monads-co')
        As part of another project I chose to write my own implementation of
        monads in TypeScript which provides "free methods" after you implement
        the minimal definition of each. I implemented a Optional and Result class
        similar to the Rust programming language to help with various error and
        exception handling in future projects.
